{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/portifolio/src/app/api/lanyard/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\n\r\nexport async function GET() {\r\n  const apiUrl = 'https://api.lanyard.rest/v1/users/396381376020086799'\r\n  try {\r\n    const response = await fetch(apiUrl);\r\n    const data = await response.json();\r\n\r\n    const filteredActivities = data.data.activities.filter((activity: any) => activity.name === 'Visual Studio Code');\r\n\r\n    const formattedData = {\r\n      listening_to_spotify: data.data.listening_to_spotify,\r\n      user: {\r\n        id: data.data.discord_user.id,\r\n        username: data.data.discord_user.username,\r\n        globalName: data.data.discord_user.global_name,\r\n        avatar: `https://cdn.discordapp.com/avatars/${data.data.discord_user.id}/${data.data.discord_user.avatar}.png`,\r\n        status: data.data.discord_status,\r\n        activeOn: {\r\n          web: data.data.active_on_discord_web,\r\n          desktop: data.data.active_on_discord_desktop,\r\n          mobile: data.data.active_on_discord_mobile,\r\n        },\r\n      },\r\n      activities: filteredActivities.map((activity: any) => ({\r\n        name: activity.name,\r\n        type: activity.type,\r\n        details: activity.details,\r\n        state: activity.state,\r\n        timestamps: activity.timestamps,\r\n        assets: {\r\n          largeImage: activity.assets?.large_image,\r\n          largeText: activity.assets?.large_text,\r\n          smallImage: activity.assets?.small_image,\r\n          smallText: activity.assets?.small_text,\r\n        },\r\n      })),\r\n      spotify: data.data.listening_to_spotify\r\n        ? {\r\n            song: data.data.spotify.song,\r\n            artist: data.data.spotify.artist,\r\n            album: data.data.spotify.album,\r\n            albumArt: data.data.spotify.album_art_url,\r\n            timestamps: data.data.spotify.timestamps,\r\n          }\r\n        : null,\r\n    };\r\n\r\n    return NextResponse.json(formattedData);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Failed to fetch data' }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe;IACpB,MAAM,SAAS;IACf,IAAI;QACF,MAAM,WAAW,MAAM,MAAM;QAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,MAAM,qBAAqB,KAAK,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,WAAkB,SAAS,IAAI,KAAK;QAE5F,MAAM,gBAAgB;YACpB,sBAAsB,KAAK,IAAI,CAAC,oBAAoB;YACpD,MAAM;gBACJ,IAAI,KAAK,IAAI,CAAC,YAAY,CAAC,EAAE;gBAC7B,UAAU,KAAK,IAAI,CAAC,YAAY,CAAC,QAAQ;gBACzC,YAAY,KAAK,IAAI,CAAC,YAAY,CAAC,WAAW;gBAC9C,QAAQ,CAAC,mCAAmC,EAAE,KAAK,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC;gBAC9G,QAAQ,KAAK,IAAI,CAAC,cAAc;gBAChC,UAAU;oBACR,KAAK,KAAK,IAAI,CAAC,qBAAqB;oBACpC,SAAS,KAAK,IAAI,CAAC,yBAAyB;oBAC5C,QAAQ,KAAK,IAAI,CAAC,wBAAwB;gBAC5C;YACF;YACA,YAAY,mBAAmB,GAAG,CAAC,CAAC,WAAkB,CAAC;oBACrD,MAAM,SAAS,IAAI;oBACnB,MAAM,SAAS,IAAI;oBACnB,SAAS,SAAS,OAAO;oBACzB,OAAO,SAAS,KAAK;oBACrB,YAAY,SAAS,UAAU;oBAC/B,QAAQ;wBACN,YAAY,SAAS,MAAM,EAAE;wBAC7B,WAAW,SAAS,MAAM,EAAE;wBAC5B,YAAY,SAAS,MAAM,EAAE;wBAC7B,WAAW,SAAS,MAAM,EAAE;oBAC9B;gBACF,CAAC;YACD,SAAS,KAAK,IAAI,CAAC,oBAAoB,GACnC;gBACE,MAAM,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI;gBAC5B,QAAQ,KAAK,IAAI,CAAC,OAAO,CAAC,MAAM;gBAChC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,KAAK;gBAC9B,UAAU,KAAK,IAAI,CAAC,OAAO,CAAC,aAAa;gBACzC,YAAY,KAAK,IAAI,CAAC,OAAO,CAAC,UAAU;YAC1C,IACA;QACN;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF"}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}